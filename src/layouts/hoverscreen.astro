---
import "../styles/global.css"
---

<!doctype html>
<html lang="en">
	<head>
    <title>IoTcraft</title>
		<meta charset="UTF-8" />
    <meta name="description" content="Connecting the virtual world with the physical." />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="preload" as="style" href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" media="print" onload="this.media='all'" />
    <noscript>
      <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" />
    </noscript>
	</head>
  <body class="bg-[var(--background)]">
    <slot/>
	<body/>
</html>
<style is:global>
  :root {
    --background: #101010;
    --sec: #0561ad;
    --white: #dfdfdf;
    --white-icon: #f3f3f398;
    --white-icon-tr: #f3f3f310;
  }
  * {
    font-family:
      "montserrat",
      -apple-system,
      system-ui,
      sans-serif;
    box-sizing: border-box;
    padding: 0;
    margin: 0;
  }
  *::selection {
    background-color: var(--sec);
    color: var(--background);
  }
  ::-webkit-scrollbar {
    width: 15px;
  }
  ::-webkit-scrollbar-track {
    background: var(--container);
    border-radius: 30px;
  }
  ::-webkit-scrollbar-thumb {
    background: var(--background);
    border-radius: 10px;
  }
  ::-webkit-scrollbar-thumb:hover {
    background: var(--pink);
  }
  * {
    scrollbar-width: thin;
    scrollbar-color: var(--line) var(--container);
  }
  .shiny-sec {
    background: linear-gradient(135deg, var(--sec) 25%, #eee5ff 50%, var(--sec) 75%);
    background-size: 400% 100%;
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    animation: shine 3s linear infinite;
  }
  @keyframes shine {
    0% {
      background-position: 100% 50%;
    }
    30%,
    70% {
      background-position: 0% 50%;
    }
  }
  .rotate {
    transform: rotateY(180deg);
  }
  #loadingScreen {
    opacity: 1;
    transition: opacity 0.9s linear;
  }
  #loadingScreen.hide {
    opacity: 0;
  }
</style>
<script>
import mqtt from "mqtt"
import {
  type HandLandmarkerResult,
  DrawingUtils,
  HandLandmarker,
  FilesetResolver,
} from "@mediapipe/tasks-vision";
const loadingScreen = window.document.getElementById("loadingScreen") as HTMLElement;
const camera = window.document.getElementById("camera") as HTMLVideoElement;
const canvas = window.document.getElementById("canvas") as HTMLCanvasElement;
const startButton = window.document.getElementById("startButton") as HTMLButtonElement;
const connectionStatus = window.document.getElementById("connectionStatus") as HTMLElement;
const drawingCanvas = canvas.getContext("2d") as CanvasRenderingContext2D;
const urlInput = window.document.getElementById("urlInput") as HTMLInputElement;
const portInput = window.document.getElementById("portInput") as HTMLInputElement;
const topicInput = window.document.getElementById("topicInput") as HTMLInputElement;
const parameters = new URLSearchParams(window.location.search);
if (parameters.get("url") !== null) {
  urlInput.value = parameters.get("url") as string;
}
if (parameters.get("port") !== null) {
  portInput.value = parameters.get("port") as string;
}
if (parameters.get("topic") !== null) {
  topicInput.value = parameters.get("topic") as string;
}
const landmarker = await HandLandmarker.createFromOptions(await FilesetResolver.forVisionTasks("https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@latest/wasm"), {
  baseOptions: {
    modelAssetPath: "https://storage.googleapis.com/mediapipe-models/hand_landmarker/hand_landmarker/float16/1/hand_landmarker.task",
    delegate: "GPU"
  },
  runningMode: "VIDEO",
  numHands: 2
});
setTimeout(() => {
  loadingScreen.classList.add("hide");
}, 500);
setTimeout(() => {
  loadingScreen.style.display = "none";
}, 1500);
let url;
let port;
let topic: string;
let cameraActive: boolean;
let lastTime: any;
let x1 = 0;
let y1 = 0;
let x2 = 0;
let y2 = 0;
let results: HandLandmarkerResult | undefined;
let client: mqtt.MqttClient;
startButton.addEventListener("click", () => {
  if (startButton.disabled) {
    return;
  }
  startButton.disabled = true;
  activate();
});
function activate() {
  if (cameraActive) {
    cameraActive = false;
    if (client !== undefined) {
      client.end();
    }
    connectionStatus.innerHTML = '<span class="inline-flex items-center bg-red-100 text-red-800 text-xs font-medium px-2.5 py-1 rounded-full dark:bg-red-900 dark:text-red-300"><span class="w-2 h-2 me-1 bg-red-500 rounded-full"></span>Deactivated</span>';
    setTimeout(() => {
      startButton.disabled = false;
    }, 5000);
  } else {
    cameraActive = true;
    connect();
    connectionStatus.innerHTML = '<span class="inline-flex items-center bg-green-100 text-green-800 text-xs font-medium px-2.5 py-1 rounded-full dark:bg-green-900 dark:text-green-300"><span class="w-2 h-2 me-1 bg-green-500 rounded-full"></span>Active</span>';
    setTimeout(() => {
      startButton.disabled = false;
    }, 5000);
  }
  window.navigator.mediaDevices.getUserMedia({video: true}).then((stream) => {
    camera.srcObject = stream;
    camera.addEventListener("loadeddata", predictWebcam);
  });
}
function connect() {
  url = urlInput.value;
  port = portInput.value;
  topic = topicInput.value;
  if (url == "" && port == "" && topic == "") {
    return;
  }
  if (url == "") {
    url = "test.mosquitto.org";
  }
  if (port == "") {
    port = "8081";
  }
  if (topic == "") {
    topic = "iotcraft-test";
  }
  client = mqtt.connect("wss://" + url + ":" + port + "/mqtt", {
    clientId: crypto.randomUUID(),
    username: "",
    password: "",
    clean: true,
  })
  client.on("connect", () => {
    client.subscribe(topic)
    window.setInterval(handleBothHands, 1000);
  });
}
function predictWebcam() {
  if (camera.currentTime !== lastTime) {
    lastTime = camera.currentTime;
    results = landmarker.detectForVideo(camera, Date.now());
  }
  drawingCanvas.save();
  drawingCanvas.clearRect(0, 0, canvas.width, canvas.height);
  if (results === undefined) {
    return;
  }
  const landmarksResult = results.landmarks;
  if (!landmarksResult) {
    return;
  }
  const drawingUtils = new DrawingUtils(drawingCanvas);
  for (const landmarks of landmarksResult) {
    drawingUtils.drawConnectors(landmarks, HandLandmarker.HAND_CONNECTIONS, {color: "#646464", lineWidth: 10});
    drawingUtils.drawLandmarks(landmarks, {color: "#FFFFFF", lineWidth: 4});
    const indexFinger = landmarks[8];
    const x = indexFinger.x;
    const y = indexFinger.y;
    drawingCanvas.beginPath();
    drawingCanvas.arc(x * canvas.width, y * canvas.height, 20, 0, 2 * Math.PI);
    drawingCanvas.fillStyle = "#FF0000";
    drawingCanvas.fill();
    drawingCanvas.closePath();
  }
  if (landmarksResult.length == 2) {
    x1 = landmarksResult[0][8].x;
    y1 = landmarksResult[0][8].y;
    x2 = landmarksResult[1][8].x;
    y2 = landmarksResult[1][8].y;
  }
  drawingCanvas.restore();
  if (cameraActive) {
    window.requestAnimationFrame(predictWebcam);
  }
}
function handleBothHands() {
  const status1 = sendControls(x1, y1, x2, y2);
  const status2 = sendControls(x2, y2, x1, y1);
  if (status1 && status2) {
    client.publish(topic, "stop");
  }
}
function sendControls(xDrive: number, yDrive: number, xSpeed: number, ySpeed: number) {
  if (isInsideCircle(0.75, 0.5, 0.1, xDrive, yDrive)) {
    if (isInsideCircle(0.25, 0.5, 0.3, xSpeed, ySpeed)) {
      sendDriveDistance(ySpeed);
      return false;
    }
  }
  return true;
}
function isInsideCircle(circleX: number, circleY: number, rad: number, x: number, y: number) {
  return ((x - circleX) * (x - circleX) + (y - circleY) * (y - circleY) <= rad * rad);
}
function sendDriveDistance(y: number) {
  const reversed = 1 - y;
  const centered = reversed - 0.5;
  const distance = centered * 1000;
  client.publish(topic, Math.floor(distance).toString());
}
</script>
