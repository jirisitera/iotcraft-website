---
import { AstroFont } from 'astro-font';
import AppFooter from "../components/AppFooter.astro";
import AppHeader from "../components/AppHeader.astro";
import "../styles/global.css";
---
<!doctype html>
<html lang="en">
  <head>
    <title>IoTcraft</title>
    <meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Connecting the virtual world with the physical." />
		<link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <AstroFont config={[{
      src: [],
      name: "Urbanist",
      preload: true,
      display: "swap",
      selector: "html",
      fallback: "sans-serif",
      googleFontsURL: 'https://fonts.googleapis.com/css2?family=Urbanist:wght@400;500;600;700&display=swap',
    }]}/>
  </head>
  <body class="bg-white dark:bg-gray-950">
    <AppHeader />
    <slot />
    <AppFooter />
	<body/>
</html>
<script>
import mqtt from "mqtt"
import {
  type GestureRecognizerResult,
  DrawingUtils,
  GestureRecognizer,
  FilesetResolver
} from "@mediapipe/tasks-vision";
const loadingScreen = window.document.getElementById("loadingScreen") as HTMLElement;
const camera = window.document.getElementById("camera") as HTMLVideoElement;
const canvas = window.document.getElementById("canvas") as HTMLCanvasElement;
const output = window.document.getElementById("output") as HTMLElement;
const table = document.getElementById("keybinds") as HTMLTableElement;
const startButton = window.document.getElementById("startButton") as HTMLButtonElement;
const connectionStatus = window.document.getElementById("connectionStatus") as HTMLElement;
const drawingCanvas = canvas.getContext("2d") as CanvasRenderingContext2D;
const urlInput = window.document.getElementById("urlInput") as HTMLInputElement;
const portInput = window.document.getElementById("portInput") as HTMLInputElement;
const topicInput = window.document.getElementById("topicInput") as HTMLInputElement;
const parameters = new URLSearchParams(window.location.search);
if (parameters.get("url") !== null) {
  urlInput.value = parameters.get("url") as string;
}
if (parameters.get("port") !== null) {
  portInput.value = parameters.get("port") as string;
}
if (parameters.get("topic") !== null) {
  topicInput.value = parameters.get("topic") as string;
}
const recognizer = await GestureRecognizer.createFromOptions(await FilesetResolver.forVisionTasks("https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@latest/wasm"), {
  baseOptions: {
    modelAssetPath: "https://storage.googleapis.com/mediapipe-models/gesture_recognizer/gesture_recognizer/float16/1/gesture_recognizer.task",
    delegate: "GPU"
  },
  runningMode: "VIDEO",
  numHands: 10
});
setTimeout(() => {
  loadingScreen.classList.add("hide");
}, 500);
setTimeout(() => {
  loadingScreen.style.display = "none";
}, 1500);
let url: string;
let port: string;
let topic: string;
let cameraActive: boolean;
let lastTime: number;
let lastKeybind: string;
let results: GestureRecognizerResult | undefined;
let client: mqtt.MqttClient;
startButton.addEventListener("click", () => {
  if (startButton.disabled) {
    return;
  }
  startButton.disabled = true;
  activate();
});
function activate() {
  if (cameraActive) {
    cameraActive = false;
    if (client !== undefined) {
      client.end();
    }
    connectionStatus.innerHTML = '<span class="inline-flex items-center bg-red-100 text-red-800 text-xs font-medium px-2.5 py-1 rounded-full dark:bg-red-900 dark:text-red-300"><span class="w-2 h-2 me-1 bg-red-500 rounded-full"></span>Deactivated</span>';
    setTimeout(() => {
      startButton.disabled = false;
    }, 5000);
  } else {
    cameraActive = true;
    connect();
    connectionStatus.innerHTML = '<span class="inline-flex items-center bg-green-100 text-green-800 text-xs font-medium px-2.5 py-1 rounded-full dark:bg-green-900 dark:text-green-300"><span class="w-2 h-2 me-1 bg-green-500 rounded-full"></span>Active</span>';
    setTimeout(() => {
      startButton.disabled = false;
    }, 5000);
  }
  window.navigator.mediaDevices.getUserMedia({video: true}).then((stream) => {
    camera.srcObject = stream;
    camera.addEventListener("loadeddata", predictWebcam);
  });
}
function connect() {
  url = urlInput.value;
  port = portInput.value;
  topic = topicInput.value;
  if (url == "" && port == "" && topic == "") {
    return;
  }
  if (url == "") {
    url = "test.mosquitto.org";
  }
  if (port == "") {
    port = "8081";
  }
  if (topic == "") {
    topic = "iotcraft-test";
  }
  client = mqtt.connect("wss://" + url + ":" + port + "/mqtt", {
    clientId: crypto.randomUUID(),
    username: "",
    password: "",
    clean: true,
  })
  client.on("connect", () => {
    client.subscribe(topic)
    window.setInterval(sendGesture, 1000);
  });
}
function predictWebcam() {
  if (camera.currentTime !== lastTime) {
    lastTime = camera.currentTime;
    results = recognizer.recognizeForVideo(camera, Date.now());
  }
  drawingCanvas.save();
  drawingCanvas.clearRect(0, 0, canvas.width, canvas.height);
  if (results === undefined) {
    return;
  }
  const landmarksResult = results.landmarks;
  if (!landmarksResult) {
    return;
  }
  const drawingUtils = new DrawingUtils(drawingCanvas);
  for (const landmarks of landmarksResult) {
    drawingUtils.drawConnectors(landmarks, GestureRecognizer.HAND_CONNECTIONS, {color: "#646464", lineWidth: 10});
    drawingUtils.drawLandmarks(landmarks, {color: "#FFFFFF", lineWidth: 4});
    const indexFinger = landmarks[8];
    const x = indexFinger.x;
    const y = indexFinger.y;
    drawingCanvas.beginPath();
    drawingCanvas.arc(x * canvas.width, y * canvas.height, 20, 0, 2 * Math.PI);
    drawingCanvas.fillStyle = "#FF0000";
    drawingCanvas.fill();
    drawingCanvas.closePath();
  }
  drawingCanvas.restore();
  const gestureResult = results.gestures;
  if (!gestureResult) {
    return;
  }
  // hands
  let handBuilder = []
  for (const handedness of results.handednesses) {
    handBuilder.push(oppositeHand(handedness[0].displayName));
  }
  let hands = handBuilder.join(", ");
  // gestures
  let gestureBuilder = []
  let confidenceBuilder = []
  for (const gesture of gestureResult) {
    const currentGesture = gesture[0];
    const name = currentGesture.categoryName;
    gestureBuilder.push(name);
    confidenceBuilder.push((currentGesture.score * 100.0).toFixed(2));
  }
  let gestures = gestureBuilder.join(", ");
  let confidences = confidenceBuilder.join(", ");
  output.innerText = "Hands: " + hands + "\nGestures: " + gestures + "\n Confidences: " + confidences;
  if (cameraActive) {
    window.requestAnimationFrame(predictWebcam);
  }
}
function sendGesture() {
  if (results === undefined) {
    return;
  }
  if (results.handednesses.length < 2) {
    return;
  }
  // organize hand data
  const firstHand = oppositeHand(results.handednesses[0][0].displayName);
  const secondHand = oppositeHand(results.handednesses[1][0].displayName);
  let rightHand = 0;
  let leftHand = 0;
  if (firstHand === "Right" && secondHand === "Left") {
    leftHand = 1;
  } else if (firstHand === "Left" && secondHand === "Right") {
    rightHand = 1;
  } else {
    return;
  }
  // get gestures
  const leftGesture = results.gestures[leftHand][0].categoryName;
  const rightGesture = results.gestures[rightHand][0].categoryName;
  // get requirements
  for (let i = 1; i < table.rows.length; i++) {
    const row = table.rows[i];
    const leftRequirement = (row.cells[0].getElementsByTagName("md-outlined-select")[0] as HTMLInputElement).value;
    const rightRequirement = (row.cells[1].getElementsByTagName("md-outlined-select")[0] as HTMLInputElement).value;
    const keybind = (row.cells[2].getElementsByTagName("md-outlined-text-field")[0] as HTMLInputElement).value;
    // send gesture
    if (keybind === lastKeybind) {
      continue;
    }
    if (leftGesture === leftRequirement && rightGesture === rightRequirement) {
      client.publish(topic, keybind)
      lastKeybind = keybind;
      console.log("Sent gesture: " + keybind);
    }
  }
}
function oppositeHand(hand) {
  return hand === "Left" ? "Right" : "Left";
}
function addKeybind() {
  const row = table.rows[1];
  const clone = row.cloneNode(true);
  table.appendChild(clone);
}
function removeKeybind() {
  if (table.rows.length > 2) {
    table.deleteRow(table.rows.length - 1);
  }
}
</script>
