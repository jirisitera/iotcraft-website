---
import { AstroFont } from 'astro-font';
import AppFooter from "../components/AppFooter.astro";
import AppHeader from "../components/AppHeader.astro";
import "../styles/global.css"
---
<!doctype html>
<html lang="en">
  <head>
    <title>IoTcraft</title>
    <meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Connecting the virtual world with the physical." />
		<link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <AstroFont config={[{
      src: [],
      name: "Urbanist",
      preload: true,
      display: "swap",
      selector: "html",
      fallback: "sans-serif",
      googleFontsURL: 'https://fonts.googleapis.com/css2?family=Urbanist:wght@400;500;600;700&display=swap',
    }]}/>
  </head>
  <body class="bg-white dark:bg-gray-950">
    <AppHeader />
    <slot />
    <AppFooter />
	<body/>
</html>
<script>
import mqtt from "mqtt"
const chatbox = document.getElementById("chatbox") as HTMLElement;
const sendButton = document.getElementById("sendButton") as HTMLButtonElement;
const connectButton = window.document.getElementById("connectButton") as HTMLInputElement;
const connectionStatus = window.document.getElementById("connectionStatus") as HTMLElement;
const textInput = document.getElementById("textInput") as HTMLInputElement;
const urlInput = window.document.getElementById("urlInput") as HTMLInputElement;
const portInput = window.document.getElementById("portInput") as HTMLInputElement;
const topicSendInput = window.document.getElementById("topicSendInput") as HTMLInputElement;
const topicReceiveInput = window.document.getElementById("topicReceiveInput") as HTMLInputElement;
const parameters = new URLSearchParams(window.location.search);
const urlValue = parameters.get("url");
if (urlValue !== null) {
  urlInput.value = urlValue;
}
const portValue = parameters.get("port");
if (portValue !== null) {
  portInput.value = portValue;
}
const topicSendValue = parameters.get("topicSend");
if (topicSendValue !== null) {
  topicSendInput.value = topicSendValue;
}
const topicReceiveValue = parameters.get("topicReceive");
if (topicReceiveValue !== null) {
  topicReceiveInput.value = topicReceiveValue;
}
let client: mqtt.MqttClient;
let url = urlInput.value;
let port = portInput.value;
let topicSend = topicSendInput.value;
let topicReceive = topicReceiveInput.value;
if (url == "") {
  url = "test.mosquitto.org";
}
if (port == "") {
  port = "8081";
}
if (topicSend == "") {
  topicSend = "iotcraft/send";
}
if (topicReceive == "") {
  topicReceive = "iotcraft/receive";
}
connectButton.addEventListener("click", connect);
function connect() {
  if (connectButton.disabled) {
    return;
  }
  connectButton.disabled = true;
  if (connectionStatus.innerHTML.includes("Connected")) {
    client.end();
    connectionStatus.innerHTML = '<span class="inline-flex items-center bg-red-100 text-red-800 text-xs font-medium px-2.5 py-1 rounded-full dark:bg-red-900 dark:text-red-300"><span class="w-2 h-2 me-1 bg-red-500 rounded-full"></span>Disconnected</span>';
    setTimeout(() => {
      connectButton.disabled = false;
    }, 5000);
    return;
  }
  client = mqtt.connect("wss://" + url + ":" + port + "/mqtt", {
    clientId: crypto.randomUUID(),
    username: "",
    password: "",
    clean: true,
  })
  client.on("connect", () => {
    connectionStatus.innerHTML = '<span class="inline-flex items-center bg-green-100 text-green-800 text-xs font-medium px-2.5 py-1 rounded-full dark:bg-green-900 dark:text-green-300"><span class="w-2 h-2 me-1 bg-green-500 rounded-full"></span>Connected</span>';
    client.subscribe(topicReceive);
  });
  client.on("message", (_topic, message) => {
    receive(message.toString());
  });
  setTimeout(() => {
    connectButton.disabled = false;
  }, 5000);
}
function receive(message: string) {
  const messageElement = document.createElement("div");
  messageElement.classList.add("mb-2");
  messageElement.innerHTML = `<p class="bg-gray-700 text-white rounded-lg py-2 px-4 inline-block">${message}</p>`;
  chatbox.appendChild(messageElement);
  chatbox.scrollTop = chatbox.scrollHeight;
}
sendButton.addEventListener("click", send);
textInput.addEventListener("keyup", (event) => {
  if (event.key === "Enter") {
    send();
  }
});
function send() {
  const message = textInput.value;
  if (message.trim() == "") {
    return;
  }
  const messageElement = document.createElement("div");
  messageElement.classList.add("mb-2", "text-right");
  messageElement.innerHTML = `<p class="bg-blue-500 text-white rounded-lg py-2 px-4 inline-block">${message}</p>`;
  chatbox.appendChild(messageElement);
  chatbox.scrollTop = chatbox.scrollHeight;
  client.publish(topicSend, message);
  textInput.value = "";
}
</script>
