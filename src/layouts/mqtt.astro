<!doctype html>
<html lang="en">
	<head>
    <title>IoTcraft</title>
		<meta charset="UTF-8" />
    <meta name="description" content="Connecting the virtual world with the physical." />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="preload" as="style" href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" media="print" onload="this.media='all'" />
    <noscript>
      <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" />
    </noscript>
	</head>
  <body class="bg-[--background] md:px-48 lg:px-20 px-9">
		<slot />
	</body>
</html>
<style is:global>
  :root {
    --background: #101010;
    --sec: #0561ad;
    --white: #dfdfdf;
    --white-icon: #f3f3f398;
    --white-icon-tr: #f3f3f310;
  }
  * {
    font-family:
      "montserrat",
      -apple-system,
      system-ui,
      sans-serif;
    box-sizing: border-box;
    padding: 0;
    margin: 0;
  }
  *::selection {
    background-color: var(--sec);
    color: var(--background);
  }
  ::-webkit-scrollbar {
    width: 15px;
  }
  ::-webkit-scrollbar-track {
    background: var(--container);
    border-radius: 30px;
  }
  ::-webkit-scrollbar-thumb {
    background: var(--background);
    border-radius: 10px;
  }
  ::-webkit-scrollbar-thumb:hover {
    background: var(--pink);
  }
  * {
    scrollbar-width: thin;
    scrollbar-color: var(--line) var(--container);
  }
  .shiny-sec {
    background: linear-gradient(135deg, var(--sec) 25%, #eee5ff 50%, var(--sec) 75%);
    background-size: 400% 100%;
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    animation: shine 3s linear infinite;
  }
  @keyframes shine {
    0% {
      background-position: 100% 50%;
    }
    30%,
    70% {
      background-position: 0% 50%;
    }
  }
</style>
<script>
import mqtt from "mqtt"

const connectButton = window.document.getElementById("connectButton");
const connectionStatus = window.document.getElementById("connectionStatus");
const urlInput = window.document.getElementById("urlInput");
const portInput = window.document.getElementById("portInput");
const topicInput = window.document.getElementById("topicInput");
const chatbox = document.getElementById("chatbox");
const userInput = document.getElementById("user-input");
const sendButton = document.getElementById("send-button");

let client: mqtt.MqttClient | null;
let url = (urlInput as HTMLInputElement).value;
let port = (portInput as HTMLInputElement).value;
let topic = (topicInput as HTMLInputElement).value;

if (url == "") {
  url = "test.mosquitto.org";
}
if (port == "") {
  port = "8081";
}
if (topic == "") {
  topic = "iotcraft-test";
}

connectButton?.addEventListener("click", function () {
  if ((connectButton as HTMLButtonElement).disabled) {
    return;
  }
  (connectButton as HTMLButtonElement).disabled = true;
  connect();
});

sendButton?.addEventListener("click", sendMessage);

userInput?.addEventListener("keyup", function (event) {
  if (event.key === "Enter") {
    sendMessage();
  }
});

function sendMessage() {
  const userMessage = (userInput as HTMLInputElement).value;
  if (userMessage?.trim() !== "") {
    transmit(userMessage);
    (userInput as HTMLInputElement).value = "";
  }
}

function connect() {
  if (client != null) {
    if (connectionStatus == null) {
      return;
    }
    client.end();
    client = null;
    connectionStatus.innerHTML = '<span class="inline-flex items-center bg-red-100 text-red-800 text-xs font-medium px-2.5 py-1 rounded-full dark:bg-red-900 dark:text-red-300"><span class="w-2 h-2 me-1 bg-red-500 rounded-full"></span>Disconnected</span>';
    setTimeout(() => {
      (connectButton as HTMLButtonElement).disabled = false;
    }, 5000);
    return;
  }
  client = mqtt.connect("wss://" + url + ":" + port + "/mqtt", {
    clientId: crypto.randomUUID(),
    username: "",
    password: "",
    clean: true,
  })
  if (connectionStatus == null) {
    return;
  }
  client.on("connect", () => {
    connectionStatus.innerHTML = '<span class="inline-flex items-center bg-green-100 text-green-800 text-xs font-medium px-2.5 py-1 rounded-full dark:bg-green-900 dark:text-green-300"><span class="w-2 h-2 me-1 bg-green-500 rounded-full"></span>Connected</span>';
    client?.subscribe(topic);
  });
  client.on("message", (topic, message) => {
    receive(message.toString());
  });
  setTimeout(() => {
    (connectButton as HTMLButtonElement).disabled = false;
  }, 5000);
}

function transmit(message: string | null) {
  if (chatbox == null) {
    return;
  }
  if (message == null) {
    return;
  }
  const messageElement = document.createElement("div");
  messageElement.classList.add("mb-2", "text-right");
  messageElement.innerHTML = `<p class="bg-blue-500 text-white rounded-lg py-2 px-4 inline-block">${message}</p>`;
  chatbox.appendChild(messageElement);
  chatbox.scrollTop = chatbox.scrollHeight;
  client?.publish(topic, message);
}

function receive(message: string) {
  if (chatbox == null) {
    return;
  }
  const messageElement = document.createElement("div");
  messageElement.classList.add("mb-2");
  messageElement.innerHTML = `<p class="bg-gray-700 text-white rounded-lg py-2 px-4 inline-block">${message}</p>`;
  chatbox.appendChild(messageElement);
  chatbox.scrollTop = chatbox.scrollHeight;
}

</script>
